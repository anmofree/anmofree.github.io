<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[年轻时应该去远方]]></title>
    <url>%2Fanmofree.github.io%2F2019%2F12%2F04%2F%E5%B9%B4%E8%BD%BB%E6%97%B6%E5%BA%94%E8%AF%A5%E5%8E%BB%E8%BF%9C%E6%96%B9%2F</url>
    <content type="text"><![CDATA[年轻时应该去远方泰戈尔在《新月集》里写过的诗句：“只要他肯把他的船借给我，我就给它安装一百只桨，扬起五个或六个或七个布帆来。我决不把它驾驶到愚蠢的市场上去……我将带我的朋友阿细和我做伴。我们要快快乐乐地航行于仙人世界里的七个大海和十三条河道。我将在绝早的晨光里张帆航行。中午，你正在池塘洗澡的时候，我们将在一个陌生的国王的国土上了。”]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7实现JDK1.7和JDK1.8共存]]></title>
    <url>%2Fanmofree.github.io%2F2019%2F11%2F27%2FCentos7%E5%AE%9E%E7%8E%B0JDK1-7%E5%92%8CJDK1-8%E5%85%B1%E5%AD%98%2F</url>
    <content type="text"><![CDATA[背景有一台服务器的操作系统是centos7，JDK为1.8。但是一个老项目的程序都是用的JDK1.7。为了不妨碍服务器已有程序的正常运行，需要实现JDK1.7和JDK1.8共存。 实施下载JDK1.7下载jdk7u79linuxx64.tar.gz 然后上传Linux。 注意：以下命令在root用户下执行 添加用户123useradd testpasswd test# 设置密码 给用户添加root权限12chmod 640 /etc/sudoersvim /etc/sudoers 添加以下内容 123## Allow root to run any commands anywhere root ALL=(ALL) ALLtest ALL=(ALL) ALL 将用户添加到root用户组123usermod -a -G root test# 查看用户属于哪个用户组groups test 解压JDK1.7的tar包1tar zxvf jdk7u79linuxx64.tar.gz 改变JDK1.7解压后文件夹的所属用户和组1chown -R test:test jdk1.7.0_79 注意：以下命令在test用户下执行 配置java环境变量12su testvim ~/.bashrc 添加以下内容 123export JAVA_HOME=/software/jdk1.7.0_79/export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar source一下 1source ~/.bashrc 查看java版本 1java -version 结果 123java version &quot;1.7.0_79&quot;Java(TM) SE Runtime Environment (build 1.7.0_79-b15)Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thrift服务（3）：使用实战]]></title>
    <url>%2Fanmofree.github.io%2F2019%2F11%2F21%2FThrift%E6%9C%8D%E5%8A%A1%EF%BC%883%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[实战环境 win10 IDEA 2018.1.6 JDK 1.8 thrift 0.11.0 spring-boot 2.2.1 创建Thrift项目 创建Thrift项目 编译thrift文件，导出成java文件,并将编译导出的java文件打成jar包，作为Thrift API 创建Thrift项目新建一个maven项目，在src/main包下创建thrift文件夹和java文件夹，在thrift文件夹下编写RPCDateService.thrift文件。我们可以编写如下接口： 1234namespace java com.wl.thrift.apiservice RPCDateService&#123; string getDate(1:string userName)&#125; pom文件需要添加以下依赖和插件 123456789101112131415161718192021222324252627282930313233&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.thrift&lt;/groupId&gt; &lt;artifactId&gt;libthrift&lt;/artifactId&gt; &lt;version&gt;0.11.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.thrift.tools&lt;/groupId&gt; &lt;artifactId&gt;maven-thrift-plugin&lt;/artifactId&gt; &lt;version&gt;0.1.11&lt;/version&gt; &lt;configuration&gt; &lt;!--&lt;thriftExecutable&gt;/usr/local/bin/thrift&lt;/thriftExecutable&gt;--&gt; &lt;!--&lt;thriftSourceRoot&gt;src/main/thrift&lt;/thriftSourceRoot&gt;--&gt; &lt;outputDirectory&gt;src/main/java&lt;/outputDirectory&gt; &lt;generator&gt;java&lt;/generator&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;thrift-sources&lt;/id&gt; &lt;phase&gt;generate-sources&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;compile&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; ps: thrift文件需要编译，采用的是maven-thrift-plugin插件 libthrift依赖的版本需要和本地安装的Thrift服务版本相同，否则编译报错。安装见上一篇文章 maven-thrift-plugin插件的执行compile阶段绑定generate-sources阶段。 为什么要绑定在这个阶段？而不是compile阶段呢？因为我们thrift插件的作用是生成java文件，而在maven执行compile阶段时，java文件必须生成完毕才能进行编译，因此，该插件的执行必须在compile之前，所以放在generate-sources阶段比较合适。 thriftExecutable：指的是thrift编译器的位置，如果我们配置了环境变量，可以不指定。验证环境变量可以使用thrift –version命令。thriftSourceRoot：thrift源文件的目录，默认会从src/main/thrift下读取。outputDirectory：生成java文件的目录。其实这个一般不需要配置，因为java文件的包名是在.thrift文件以namespace的形式定义的。 编译thrift文件，导出成java文件，并打成jar包在IDEA底部的Terminal工具中输入mvn clean install命令进行打成jar包。 开发Thrift服务端采用sprint-Boot编写服务端 创建spring-boot项目在pom文件中导入依赖 12345678910111213141516171819202122232425262728293031&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.wl&lt;/groupId&gt; &lt;artifactId&gt;ThriftAPI&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.thrift&lt;/groupId&gt; &lt;artifactId&gt;libthrift&lt;/artifactId&gt; &lt;version&gt;0.11.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 创建controller实现Thrift API接口创建controller文件夹，创建RPCDateServiceIml.java文件，内容如下： 1234567891011121314151617181920package com.wl.controller;import com.wl.thrift.api.RPCDateService;import org.apache.thrift.TException;import org.springframework.stereotype.Controller;import java.text.SimpleDateFormat;import java.util.Date;@Controllerpublic class RPCDateServiceIml implements RPCDateService.Iface &#123; @Override public String getDate(String userName) throws TException &#123; Date now = new Date(); SimpleDateFormat simpleDateFormat = new SimpleDateFormat("今天是"+"yyyy年MM月dd日 E kk点mm分"); String nowTime = simpleDateFormat.format(now); return "Hello" + userName + "\n" + nowTime; &#125;&#125; 编写Thrift Server端代码，启动Thrift Server创建server文件夹，创建RPCThriftServer.java文件，内容如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.wl.server;import com.wl.controller.RPCDateServiceIml;import com.wl.thrift.api.RPCDateService;import org.apache.thrift.protocol.TBinaryProtocol;import org.apache.thrift.server.TServer;import org.apache.thrift.server.TThreadPoolServer;import org.apache.thrift.transport.TServerSocket;import org.apache.thrift.transport.TServerTransport;import org.apache.thrift.transport.TTransportFactory;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;@Componentpublic class RPCThriftServer &#123; protected final Logger logger = LoggerFactory.getLogger(this.getClass()); @Value("$&#123;thrift.port&#125;") private int port; @Value("$&#123;thrift.minWorkerThreads&#125;") private int minThreads; @Value("$&#123;thrift.maxWorkerThreads&#125;") private int maxThreads; private TBinaryProtocol.Factory protocolFactory; private TTransportFactory transportFactory; @Autowired private RPCDateServiceIml rpcDateService; public void init()&#123; protocolFactory = new TBinaryProtocol.Factory(); transportFactory = new TTransportFactory(); &#125; public void start()&#123; RPCDateService.Processor processor = new RPCDateService.Processor&lt;RPCDateService.Iface&gt;(rpcDateService); init(); try &#123; TServerTransport transport = new TServerSocket(port); TThreadPoolServer.Args tArgs = new TThreadPoolServer.Args(transport); tArgs.processor(processor); tArgs.protocolFactory(protocolFactory); tArgs.transportFactory(transportFactory); tArgs.minWorkerThreads(minThreads); tArgs.maxWorkerThreads(maxThreads); TServer server = new TThreadPoolServer(tArgs); logger.info("thrift服务启动成功，端口=&#123;&#125;",port); server.serve(); &#125;catch (Exception e)&#123; logger.error("thrift服务启动失败"); &#125; &#125;&#125; 修改SpringApplication启动类内容如下： 1234567891011121314151617181920212223package com.wl;import com.wl.server.RPCThriftServer;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.ApplicationContext;@SpringBootApplicationpublic class ThriftDemoApplication &#123; private static RPCThriftServer rpcThriftServer; public static void main(String[] args) &#123; ApplicationContext context = SpringApplication.run(ThriftDemoApplication.class, args); try &#123; rpcThriftServer = context.getBean(RPCThriftServer.class); rpcThriftServer.start(); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125;&#125; 在application.properties中添加配置123thrift.port=6666thrift.minWorkerThreads=10thrift.maxWorkerThreads=100 启动Thrift服务端结果如下： 123456789101112 . ____ _ __ _ _ /\\ / ___&apos;_ __ _ _(_)_ __ __ _ \ \ \ \( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \ \\/ ___)| |_)| | | | | || (_| | ) ) ) ) &apos; |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.2.1.RELEASE)2019-11-21 21:21:41.304 INFO 56960 --- [ main] com.wl.ThriftDemoApplication : Starting ThriftDemoApplication on D-NJ0202188 with PID 56960 (C:\Users\lei.wang\IdeaProjects\thrift_demo\target\classes started by lei.wang in C:\Users\lei.wang\IdeaProjects\thrift_demo)2019-11-21 21:21:41.307 INFO 56960 --- [ main] com.wl.ThriftDemoApplication : No active profile set, falling back to default profiles: default2019-11-21 21:21:41.752 INFO 56960 --- [ main] com.wl.ThriftDemoApplication : Started ThriftDemoApplication in 0.899 seconds (JVM running for 2.119)2019-11-21 21:21:41.757 INFO 56960 --- [ main] com.wl.server.RPCThriftServer : thrift服务启动成功，端口=6666 创建Thrift客户端采用sprint-Boot编写服务端 创建spring-boot项目在pom文件中导入依赖 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.wl&lt;/groupId&gt; &lt;artifactId&gt;ThriftAPI&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.thrift&lt;/groupId&gt; &lt;artifactId&gt;libthrift&lt;/artifactId&gt; &lt;version&gt;0.11.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 编写RPCThriftClient：用于发出RPC调用创建client文件夹，编写RPCThriftClient.java类和RPCThriftClientConfig.java类。 RPCThriftClient.java类内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.wl.thrift_client_demo.client;import com.wl.thrift.api.RPCDateService;import org.apache.thrift.protocol.TBinaryProtocol;import org.apache.thrift.transport.TSocket;import org.apache.thrift.transport.TTransportException;public class RPCThriftClient &#123; private RPCDateService.Client client; private TBinaryProtocol protocol; private TSocket transport; private String host; private int port; public String getHost() &#123; return host; &#125; public void setHost(String host) &#123; this.host = host; &#125; public int getPort() &#123; return port; &#125; public void setPort(int port) &#123; this.port = port; &#125; public void init() &#123; transport = new TSocket(host, port); protocol = new TBinaryProtocol(transport); client = new RPCDateService.Client(protocol); &#125; public RPCDateService.Client getRPCThriftService() &#123; return client; &#125; public void open() throws TTransportException &#123; transport.open(); &#125; public void close() &#123; transport.close(); &#125;&#125; RPCThriftClientConfig.java类，内容如下： 123456789101112131415161718192021package com.wl.thrift_client_demo.client;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class RPCThriftClientConfig &#123; @Value("$&#123;thrift.host&#125;") private String host; @Value("$&#123;thrift.port&#125;") private int port; @Bean(initMethod = "init") public RPCThriftClient rpcThriftClient()&#123; RPCThriftClient rpcThriftClient = new RPCThriftClient(); rpcThriftClient.setHost(host); rpcThriftClient.setPort(port); return rpcThriftClient; &#125;&#125; 编写controller作为调用入口创建RPCThriftContoller.java类内容如下： 123456789101112131415161718192021222324252627282930313233package com.wl.thrift_client_demo.controller;import com.wl.thrift_client_demo.client.RPCThriftClient;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@RestController@RequestMapping("/index")public class RPCThriftContoller &#123; protected final Logger logger = LoggerFactory.getLogger(this.getClass()); @Autowired private RPCThriftClient rpcThriftClient; @RequestMapping(value = "/thrift",method = RequestMethod.GET) public String thriftTest(HttpServletRequest request, HttpServletResponse response)&#123; try &#123; rpcThriftClient.open(); return rpcThriftClient.getRPCThriftService().getDate("XX"); &#125;catch (Exception e)&#123; logger.error("RPC调用失败",e); return "error"; &#125;finally &#123; rpcThriftClient.close(); &#125; &#125;&#125; 修改SpringBootApplication启动类12345678910111213package com.wl.thrift_client_demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class ThriftClientDemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ThriftClientDemoApplication.class, args); &#125;&#125; 修改配置文件application.properties123thrift.host=localhostthrift.port=6666server.port=9999 启动Thrift客户端启动结果如下： 123456789101112131415161718192021 . ____ _ __ _ _ /\\ / ___'_ __ _ _(_)_ __ __ _ \ \ \ \( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \ \\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.2.1.RELEASE)2019-11-21 23:51:42.556 INFO 107628 --- [ restartedMain] c.w.t.ThriftClientDemoApplication : Starting ThriftClientDemoApplication on D-NJ0202188 with PID 107628 (C:\Users\lei.wang\IdeaProjects\thrift_client_demo\target\classes started by lei.wang in C:\Users\lei.wang\IdeaProjects\thrift_client_demo)2019-11-21 23:51:42.566 INFO 107628 --- [ restartedMain] c.w.t.ThriftClientDemoApplication : No active profile set, falling back to default profiles: default2019-11-21 23:51:42.686 INFO 107628 --- [ restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable2019-11-21 23:51:42.687 INFO 107628 --- [ restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'2019-11-21 23:51:44.197 INFO 107628 --- [ restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 9999 (http)2019-11-21 23:51:44.210 INFO 107628 --- [ restartedMain] o.apache.catalina.core.StandardService : Starting service [Tomcat]2019-11-21 23:51:44.211 INFO 107628 --- [ restartedMain] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.27]2019-11-21 23:51:44.336 INFO 107628 --- [ restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext2019-11-21 23:51:44.336 INFO 107628 --- [ restartedMain] o.s.web.context.ContextLoader : Root WebApplicationContext: initialization completed in 1649 ms2019-11-21 23:51:44.611 INFO 107628 --- [ restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor'2019-11-21 23:51:44.791 INFO 107628 --- [ restartedMain] o.s.b.d.a.OptionalLiveReloadServer : LiveReload server is running on port 357292019-11-21 23:51:44.854 INFO 107628 --- [ restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 9999 (http) with context path ''2019-11-21 23:51:44.858 INFO 107628 --- [ restartedMain] c.w.t.ThriftClientDemoApplication : Started ThriftClientDemoApplication in 3.013 seconds (JVM running for 5.185) Thrift通信测试在浏览器输入url：http://localhost:9999/index/thrift 页面打印如下结果：HelloXX 今天是2019年11月21日 星期四 23点53分 参考： https://juejin.im/post/5afa19bf51882542653995b7#heading-6 https://blog.csdn.net/u010900754/article/details/80172671]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>RPC</tag>
        <tag>Thrift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thrift服务（2）：安装]]></title>
    <url>%2Fanmofree.github.io%2F2019%2F11%2F21%2FThrift%E6%9C%8D%E5%8A%A1%EF%BC%882%EF%BC%89%EF%BC%9A%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[环境 win10 下载下载的版本为0.11.0，目前最新版到了0.13.0.下载采用清华的镜像：https://mirrors.tuna.tsinghua.edu.cn/apache/thrift/0.11.0/thrift-0.11.0.exe 安装 将exe文件下载到C:\Thrift（路径可更改）。 将thrift-0.11.0.exe改名为thrift.exe。 配置环境变量：在Path中新增一行：C:\Thrift。 验证打开cmd命令行输入命令： thrift -version 返回结果： Thrift version 0.11.0 安装完成]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>RPC</tag>
        <tag>Thrift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thrift服务（一）：介绍]]></title>
    <url>%2Fanmofree.github.io%2F2019%2F11%2F20%2FThrift%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[前言Apache Thrift是一种RPC框架。 RPC（Remote Procedure Call）即远程过程调用。其调用协议通常包含传输协议和序列化协议。传输协议包含: 如著名的gRPC(grpc / grpc.io) 使用的 http2 协议，也有如dubbo一类的自定义报文的tcp协议。序列化协议包含: 如基于文本编码的 xml json，也有二进制编码的 protobuf hessian等。 为什么需要RPC我们现在假设一个场景：服务器1应用程序A里有方法a，服务器2应用程序B里有方法b。如果应用程序A需要调用方法a，直接在本地内存调用即可。那么如果应用程序A想要调用方法b呢？ 这种跨进程甚至跨服务器的调用即需要用到RPC（远程过程调用）。需要通过网络传输来表达调用的语义和传达调用的数据。 RPC怎么实现 服务器A和服务器B如何实现网络连接？或者说客户端和服务端如何实现网络连接？目前网络同通信协议包含TCP协议、UDP协议或者HTTP协议等。目前RPC框架常用的就是TCP协议来建立连接。这时服务器A如果想连接到服务器B，就需要告诉底层的RPC框架服务端的IP、PORT、方法名、方法参数等。 服务器A的底层RPC框架拿到远程连接的参数后，开始发起远程调用。需要传输的数据是基于网络协议传输的，以TCP协议举例，因为网络协议是基于二进制的，那么内存中的数据就需要序列化（Serialize）或编码（marshal）成二进制的形式。然后底层RPC框架将二进制数据通过TCP传输到服务器B。 服务器B接收到request后，对二进制数据进行反序列化，恢复成内存中的表达方式，然后找到相应的方法进行调用，得到方法的返回值。服务器B将返回值序列化通过底层RPC框架再发送给服务器A。 服务器A接收到返回值后，再反序列化为内存中的表达方式，将结果值交给应用。 Figure 1. Steps in executing a remote procedure call（图片来源：https://www.cs.rutgers.edu/~pxk/417/notes/03-rpc.html） Thrift介绍Thrift是Facebook于2007年开发的跨语言的rpc服务框架，提供多语言的编译功能，并提供多种服务器工作模式；用户通过Thrift的IDL（接口定义语言）来描述接口函数及数据类型，然后通过Thrift的编译环境生成各种语言类型的接口文件，用户可以根据自己的需要采用不同的语言开发客户端代码和服务器端代码。 参考： https://blog.csdn.net/houjixin/article/details/42778335 https://www.zhihu.com/question/25536695]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>RPC</tag>
        <tag>Thrift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我们这一天]]></title>
    <url>%2Fanmofree.github.io%2F2019%2F11%2F19%2F%E6%88%91%E4%BB%AC%E8%BF%99%E4%B8%80%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[周日看了一部美剧《This is us》，中文可以翻译为《这就是我们》或《我们这一天》。这是第一部我觉得很治愈的美剧。没有尔虞我诈，没有性，没有暴力。虽然带一点悲剧元素，但是没有百分百的美好或许更加美好。 很喜欢第一集医生对男主角说的话： I like to think that maybe one day you’ll be an old man like me talking a younger man’s ear off, explaining to him how you took the sourest lemon that life has to offer and turned it into something resembling lemonade. 翻译： 我想也许有一天你会变成像我这样的老人，向一位年轻人娓娓道来你是如何将生活带给你柠檬般的酸楚，酿成犹如柠檬汽水般的甘甜。 尽管生活大多不如人意，也不能打败我的英雄梦想。]]></content>
      <categories>
        <category>影视</category>
      </categories>
      <tags>
        <tag>写作，影视</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[霍乱时期的爱情]]></title>
    <url>%2Fanmofree.github.io%2F2019%2F07%2F24%2F%E9%9C%8D%E4%B9%B1%E6%97%B6%E6%9C%9F%E7%9A%84%E7%88%B1%E6%83%85%2F</url>
    <content type="text"><![CDATA[诚实的生活方式其实是按照自己身体的意愿行事，饿的时候才吃饭，爱的时候不必撒谎。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fanmofree.github.io%2F2019%2F07%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
